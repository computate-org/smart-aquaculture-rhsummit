---
#- name: "Create a namespace {{ WORKBENCH_NAMESPACE }}"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'namespace.yaml') }}"
#    validate_certs: false
#- name: "Create namespace role bindings for {{ WORKBENCH_NAMESPACE }}"
#  tags:
#    - deploy-rolebindings
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'rolebindings.yaml') }}"
#    validate_certs: false
- name: "Create a Persistent Volume Claim for {{ WORKBENCH_NAME }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'persistentvolumeclaim.yaml') }}"
    validate_certs: false
#- name: "Create a default ConfigMap for Notebook for {{ WORKBENCH_NAME }}"
#  tags:
#    - deploy-configmaps
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'defaultConfigmap.yaml') }}"
#    validate_certs: false
#- name: "Create a ConfigMap for Notebook for {{ WORKBENCH_NAME }}"
#  tags:
#    - deploy-configmaps
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'configmap.yaml') }}"
#    validate_certs: false
#- name: "Create a Notebook for {{ WORKBENCH_NAME }}"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'notebook.yaml') }}"
#    validate_certs: false
- name: Wait for workbench Ready condition
  kubernetes.core.k8s_info:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    kind: Pod
    label_selectors:
      - "notebook-name={{ WORKBENCH_NAME }}"
    wait: true
    wait_timeout: 300
    wait_condition:
      type: Ready
      status: 'True'
- name: "Configure vscode extensions for workbench {{ WORKBENCH_NAME }}"
  kubernetes.core.k8s_cp:
    state: to_pod
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    container: "{{ WORKBENCH_NAME }}"
    remote_path: /opt/app-root/src/.vscode/extensions.json
    content: |-
      {
        "recommendations": [
          "ms-toolsai.jupyter"
          , "redhat.java"
          , "vscjava.vscode-java-debug"
          , "vscjava.vscode-maven"
        ]
      }
    validate_certs: false
- name: "Configure vscode settings.json for workbench {{ WORKBENCH_NAME }}"
  kubernetes.core.k8s_cp:
    state: to_pod
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    container: "{{ WORKBENCH_NAME }}"
    remote_path: /opt/app-root/src/.vscode/settings.json
    content: |
      {{ lookup('template', 'vscodeSettings.json', convert_data=false) | from_json | to_nice_json }}
    validate_certs: false
- name: "Configure user settings.json for workbench {{ WORKBENCH_NAME }}"
  kubernetes.core.k8s_cp:
    state: to_pod
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    container: "{{ WORKBENCH_NAME }}"
    remote_path: /opt/app-root/src/.local/share/code-server/User/settings.json
    content: |
      {{ lookup('template', 'userSettings.json', convert_data=false) | from_json | to_nice_json }}
    validate_certs: false
- name: "Configure keybindings.json for workbench {{ WORKBENCH_NAME }}"
  kubernetes.core.k8s_cp:
    state: to_pod
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    container: "{{ WORKBENCH_NAME }}"
    remote_path: /opt/app-root/src/.local/share/code-server/User/keybindings.json
    content: |-
      // Place your key bindings in this file to override the defaultsauto[]
      [
          {
              "key": "ctrl+p",
              "command": "-extension.vim_ctrl+p",
              "when": "editorTextFocus && vim.active && vim.use<C-p> && !inDebugRepl || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
          },
          {
              "key": "ctrl+f",
              "command": "-extension.vim_ctrl+f",
              "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
          },
          {
              "key": "ctrl+c",
              "command": "-extension.vim_ctrl+c",
              "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl"
          },
          {
              "key": "ctrl+y",
              "command": "-extension.vim_ctrl+y",
              "when": "editorTextFocus && vim.active && vim.use<C-y> && !inDebugRepl"
          },
          {
              "key": "ctrl+w",
              "command": "-extension.vim_ctrl+w",
              "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
          },
          {
              "key": "ctrl+h",
              "command": "-extension.vim_ctrl+h",
              "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl"
          }
      ]
    validate_certs: false
- name: "Configure vars for workbench {{ WORKBENCH_NAME }}"
  tags:
    - deploy-vars
  kubernetes.core.k8s_cp:
    state: to_pod
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    container: "{{ WORKBENCH_NAME }}"
    remote_path: "/opt/app-root/src/{{ SITE_NAME }}/vars.yaml"
    content: |-
      {{ lookup('template', 'vars.yaml', convert_data=false) | replace('\{\{\{','{{{') | replace('\{\{\>','{{>') | replace('\{\{\#','{{#') | replace('\{\%','{%') | replace('\{\{','{{') | replace('\}\}\}', '}}}') | replace('\}\}', '}}') | replace('\%\}', '%}') }}
    validate_certs: false
- name: "Create a symbolic link to project vars in home directory"
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    command: >-
      ln -sf /opt/app-root/src/{{ SITE_NAME }}/vars.yaml /opt/app-root/src/vars.yaml
- name: "Clone computate-base project"
  tags:
    - clone-repos
    - skip-clone-repos
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    command: >-
      bash -c 'git clone https://github.com/computate-org/computate-base.git /opt/app-root/src/computate-base;
      (cd /opt/app-root/src/computate-base && mvn clean install)'
- name: "Clone computate-search project"
  tags:
    - clone-repos
    - skip-clone-repos
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    command: >-
      bash -c 'git clone https://github.com/computate-org/computate-search.git /opt/app-root/src/computate-search;
      (cd /opt/app-root/src/computate-search && mvn clean install)'
- name: "Clone computate-vertx project"
  tags:
    - clone-repos
    - skip-clone-repos
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    command: >-
      bash -c 'git clone https://github.com/computate-org/computate-vertx.git /opt/app-root/src/computate-vertx;
      (cd /opt/app-root/src/computate-vertx && mvn clean install)'
- name: "Clone computate project"
  tags:
    - clone-repos
    - skip-clone-repos
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    command: >-
      bash -c 'git clone https://github.com/computate-org/computate.git /opt/app-root/src/computate;
      (cd /opt/app-root/src/computate && mvn clean install)'
- name: "Install python virtualenv"
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    command: >-
      virtualenv /opt/app-root/src/python
- name: "Configure .bashrc for workbench {{ WORKBENCH_NAME }}"
  kubernetes.core.k8s_cp:
    state: to_pod
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    container: "{{ WORKBENCH_NAME }}"
    remote_path: /opt/app-root/src/.bashrc
    content: |-
      {{ lookup('template', 'bashrc', convert_data=false) | indent(width=6, first=false) | replace('\{\{\{','{{{') | replace('\{\{\>','{{>') | replace('\{\{\#','{{#') | replace('\{\%','{%') | replace('\{\{','{{') | replace('\}\}\}', '}}}') | replace('\}\}', '}}') | replace('\%\}', '%}') }}
    validate_certs: false
- name: "Install python dependencies"
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    command: >-
      /opt/app-root/src/python/bin/pip install jupyterlab bash_kernel ansible kubernetes openshift jinja2 jmespath pika --upgrade
- name: "Create solr computate collection"
  kubernetes.core.k8s_exec:
    namespace: "{{ SOLR_NAMESPACE }}"
    pod: solr-0
    command: >-
      bash -c '
      env SOLR_AUTH_TYPE=basic SOLR_AUTHENTICATION_OPTS="-Dbasicauth=$SOLR_ADMIN_USERNAME:$SOLR_ADMIN_PASSWORD" /opt/bitnami/solr/bin/solr create_collection --solr-url http://localhost:8983 -c {{ SOLR_COLLECTION_COMPUTATE }} -n computate
      '
  ignore_errors: true
- name: "Create solr site collection"
  kubernetes.core.k8s_exec:
    namespace: "{{ SOLR_NAMESPACE }}"
    pod: solr-0
    command: >-
      bash -c '
      env SOLR_AUTH_TYPE=basic SOLR_AUTHENTICATION_OPTS="-Dbasicauth=$SOLR_ADMIN_USERNAME:$SOLR_ADMIN_PASSWORD" /opt/bitnami/solr/bin/solr create_collection --solr-url http://localhost:8983 -c {{ SOLR_COLLECTION }} -n computate
      '
  ignore_errors: true
- name: "Copy workbench Jupyter Notebooks and Ansible to {{ WORKBENCH_NAMESPACE }}"
  tags:
    - deploy-notebooks
  kubernetes.core.k8s_cp:
    state: to_pod
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    container: "{{ WORKBENCH_NAME }}"
    remote_path: /opt/app-root/src/
    local_path: "{{ lookup('env', 'HOME') }}/.local/src/courses/{{ SITE_NAME }}-workbench/"
    validate_certs: false
- name: "Remove the .git directory in the home directory"
  tags:
    - deploy-notebooks
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    command: >-
      rm -rf /opt/app-root/src/.git/
- name: "Index the computate-search classes"
  tags:
    - index-classes
    - skip-index-classes
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    command: >-
      bash -i -c '
        cd /opt/app-root/src;
        eval $(./vars.py);
        env VARS_PATH=$COMPUTATE_SEARCH_SRC/vars.yaml \
          SITE_PATH=$COMPUTATE_SEARCH_SRC \
          COMPUTATE_SRC=$COMPUTATE_SRC \
          COMPUTATE_VERTX_SRC=$COMPUTATE_VERTX_SRC \
          SITE_LANG=enUS \
          $COMPUTATE_SRC/bin/enUS/index.sh
        '
- name: "Index the computate-vertx classes"
  tags:
    - index-classes
    - skip-index-classes
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    command: >-
      bash -i -c '
        cd /opt/app-root/src;
        eval $(./vars.py);
        env VARS_PATH=$COMPUTATE_VERTX_SRC/vars.yaml \
          SITE_PATH=$COMPUTATE_VERTX_SRC \
          COMPUTATE_SRC=$COMPUTATE_SRC \
          COMPUTATE_VERTX_SRC=$COMPUTATE_VERTX_SRC \
          SITE_LANG=enUS \
          $COMPUTATE_SRC/bin/enUS/index.sh
        '
- name: "Create a keycloak client secret in namespace {{ WORKBENCH_NAMESPACE }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'keycloak-secret.yaml') }}"
    validate_certs: false
  when: (query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-client-' + SITE_SHORT_NAME), namespace=WORKBENCH_NAMESPACE)[0].data['secret'] | default('')) == ''
- name: "Create a font awesome secret in namespace {{ WORKBENCH_NAMESPACE }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'font-awesome-secret.yaml') }}"
    validate_certs: false
  when: (query('kubernetes.core.k8s', kind='Secret', resource_name=('font-awesome'), namespace=WORKBENCH_NAMESPACE)[0].data['FONTAWESOME_KIT'] | default('')) == ''
- name: "Create a keycloak initial admin secret in namespace {{ WORKBENCH_NAMESPACE }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'keycloak-initial-admin-secret.yaml') }}"
    validate_certs: false
  when: (query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin-' + SITE_NAME), namespace=WORKBENCH_NAMESPACE)[0].data['secret'] | default('')) == ''
- name: "Create service in namespace {{ WORKBENCH_NAMESPACE }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'service.yaml') }}"
    validate_certs: false
- name: "Create network policy in namespace {{ WORKBENCH_NAMESPACE }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'networkpolicy.yaml') }}"
    validate_certs: false
- name: "Create route in namespace {{ WORKBENCH_NAMESPACE }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'route.yaml') }}"
    validate_certs: false

- name: "Copy 00-index-fiware-smart-model-data.ipynb Jupyter Notebook"
  kubernetes.core.k8s_cp:
    state: to_pod
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    container: "{{ WORKBENCH_NAME }}"
    remote_path: /opt/app-root/src/
    local_path: "{{ lookup('env', 'HOME') }}/.local/src/courses/smart-aquaculture-demo/00-index-fiware-smart-model-data.ipynb"
    validate_certs: false
  when: WORKBENCH_ADMIN
- name: "Copy clone-smart-model-data.yaml playbook"
  kubernetes.core.k8s_cp:
    state: to_pod
    namespace: "{{ ADMIN_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    container: "{{ WORKBENCH_NAME }}"
    remote_path: /opt/app-root/src/playbooks/
    local_path: "{{ lookup('env', 'HOME') }}/.local/src/courses/smart-aquaculture-demo/playbooks/clone-smart-model-data.yaml"
    validate_certs: false
  when: WORKBENCH_ADMIN
- name: "Copy clone-smart-model-data role"
  kubernetes.core.k8s_cp:
    state: to_pod
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "{{ WORKBENCH_NAME }}-0"
    container: "{{ WORKBENCH_NAME }}"
    remote_path: /opt/app-root/src/roles/clone-smart-model-data/
    local_path: "{{ lookup('env', 'HOME') }}/.local/src/courses/smart-aquaculture-demo/roles/clone-smart-model-data/"
    validate_certs: false
  when: WORKBENCH_ADMIN
- name: "Create namespace role bindings for computate"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'workbench-admin-rolebindings.yaml') }}"
    validate_certs: false
  when: WORKBENCH_ADMIN
- name: "Create solr fiware collection"
  kubernetes.core.k8s_exec:
    namespace: "{{ SOLR_NAMESPACE }}"
    pod: solr-0
    command: >-
      bash -c '
      env SOLR_AUTH_TYPE=basic SOLR_AUTHENTICATION_OPTS="-Dbasicauth=$SOLR_ADMIN_USERNAME:$SOLR_ADMIN_PASSWORD" /opt/bitnami/solr/bin/solr create_collection --solr-url http://localhost:8983 -c fiware -n computate
      '
  ignore_errors: true
  when: WORKBENCH_ADMIN
