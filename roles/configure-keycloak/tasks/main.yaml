---

- name: Get postgres master role pod info
  kubernetes.core.k8s_info:
    namespace: postgres
    kind: Pod
    label_selectors:
      - postgres-operator.crunchydata.com/role=master
  register: postgres_role_master
- name: "Increase Keycloak field lengths in Postgres"
  kubernetes.core.k8s_exec:
    namespace: postgres
    pod: "{{ postgres_role_master.resources[0].metadata.name }}"
    command: >-
      psql keycloak -c "
        alter table protocol_mapper alter column id type character varying(255);
        alter table protocol_mapper_config alter column protocol_mapper_id type character varying(255);
        alter table resource_server_policy alter column id type character varying(255);
        alter table policy_config alter column policy_id type character varying(255);
        alter table associated_policy alter column policy_id type character varying(255);
        alter table associated_policy alter column associated_policy_id type character varying(255);
        "

- name: "Install cluster-admin ClusterRoleBinding for group {{ CLUSTER_ADMIN_GROUP }} on OpenShift"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'cluster-admin-group-role-binding.yaml') }}"
    validate_certs: false

- name: Configure keycloak realm
  community.general.keycloak_realm:
    validate_certs: false
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ AUTH_URL }}"
    auth_realm: master
    auth_username: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['username'] | b64decode }}"
    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['password'] | b64decode }}"
    state: present
    id: "{{ AUTH_REALM }}"
    realm: "{{ AUTH_REALM }}"
    enabled: true
    displayName: "{{ AUTH_REALM }}"
    registrationAllowed: false
    resetPasswordAllowed: true
    editUsernameAllowed: false
    rememberMe: true
    verifyEmail: false
    loginWithEmailAllowed: false

- name: "Configure keycloak client scope openid"
  community.general.keycloak_clientscope:
    validate_certs: false
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ AUTH_URL }}"
    auth_realm: master
    auth_username: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['username'] | b64decode }}"
    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['password'] | b64decode }}"
    state: present
    id: "{{ AUTH_REALM }}-openid"
    realm: "{{ AUTH_REALM }}"
    name: "openid"
    description: A client scope for the openid client
    protocol: openid-connect
    attributes:
      include.in.token.scope: 'true'
    protocolMappers:
      - config:
          access.token.claim: 'true'
          introspection.token.claim: 'true'
        id: "{{ AUTH_REALM }}-openid-sub"
        name: "sub"
        protocol: openid-connect
        protocolMapper: oidc-sub-mapper

- name: "Configure keycloak client scope {{ AUTH_CLIENT }}"
  community.general.keycloak_clientscope:
    validate_certs: false
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ AUTH_URL }}"
    auth_realm: master
    auth_username: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['username'] | b64decode }}"
    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['password'] | b64decode }}"
    state: present
    id: "{{ AUTH_REALM }}-{{ AUTH_CLIENT }}"
    realm: "{{ AUTH_REALM }}"
    name: "{{ AUTH_CLIENT }}"
    description: A client scope for the {{ AUTH_CLIENT }} client
    protocol: openid-connect
    attributes:
      include.in.token.scope: 'true'
    protocolMappers:
      - config:
          access.token.claim: 'true'
          id.token.claim: 'false'
          included.client.audience: '{{ AUTH_CLIENT }}'
        id: "{{ AUTH_REALM }}-{{ AUTH_CLIENT }}"
        name: "{{ AUTH_CLIENT }}"
        protocol: openid-connect
        protocolMapper: oidc-audience-mapper
      - config:
          full.path: "true"
          introspection.token.claim: "true"
          userinfo.token.claim: "true"
          id.token.claim: "true"
          lightweight.claim: "false"
          access.token.claim: "true"
          claim.name: "groups"
        id: "{{ AUTH_REALM }}-{{ AUTH_CLIENT }}-groups"
        name: "groups"
        protocol: openid-connect
        protocolMapper: oidc-group-membership-mapper

- name: "Disable RSA-OAEP key component from {{ AUTH_REALM }}"
  community.general.keycloak_component:
    validate_certs: false
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ AUTH_URL }}"
    auth_realm: master
    auth_username: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['username'] | b64decode }}"
    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['password'] | b64decode }}"
    state: absent
    name: rsa-enc-generated
    parent_id: "{{ AUTH_REALM }}"
    provider_id: rsa-enc-generated
    provider_type: org.keycloak.keys.KeyProvider

- name: "Configure OpenShift client {{ AUTH_CLIENT }}"
  community.general.keycloak_client:
    state: present
    validate_certs: false
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ AUTH_URL }}"
    auth_realm: master
    auth_username: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['username'] | b64decode }}"
    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['password'] | b64decode }}"
    realm: "{{ AUTH_REALM }}"
    id: "{{ AUTH_CLIENT }}"
    name: "{{ AUTH_CLIENT }}"
    clientId: "{{ AUTH_CLIENT }}"
    standardFlowEnabled: true
    serviceAccountsEnabled: true
    authorizationServicesEnabled: true
    frontchannelLogout: true
    publicClient: false
    protocol: openid-connect
    redirectUris: "{{ lookup('template', 'keycloak-redirect-uris.yaml') | from_yaml }}"
    defaultClientScopes:
      - openid
      - profile
      - "{{ AUTH_CLIENT }}"
    authorizationSettings:
      decisionStrategy: AFFIRMATIVE

- name: Get keycloak OAuthClient resource info
  kubernetes.core.k8s_info:
    api_version: oauth.openshift.io/v1
    kind: OAuthClient
    name: keycloak
  register: keycloak_oauth_client
- name: "Install keycloak OAuthClient on OpenShift"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'oauthclient.yaml') }}"
    validate_certs: false
  when: keycloak_oauth_client.resources | length == 0
- name: Get keycloak OAuthClient resource info
  kubernetes.core.k8s_info:
    api_version: oauth.openshift.io/v1
    kind: OAuthClient
    name: keycloak
  register: keycloak_oauth_client_2
- name: Configure Keycloak OpenShift v4 identity provider
  community.general.keycloak_identity_provider:
    state: present
    validate_certs: false
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ AUTH_URL }}"
    auth_realm: master
    auth_username: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['username'] | b64decode }}"
    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['password'] | b64decode }}"
    enabled: true
    realm: "{{ AUTH_REALM }}"
    providerId: openshift-v4
    alias: openshift
    displayName: OpenShift
    trustEmail: true
    storeToken: false
    addReadTokenRoleOnCreate: false
    authenticateByDefault: false
    linkOnly: false
    config:
      syncMode: "LEGACY"
      baseUrl: "https://api{{ OPENSHIFT_APPS_DOMAIN | regex_replace('^[^\\.]*') }}:6443"
      clientId: "keycloak"
      clientSecret: "{{ keycloak_oauth_client_2.resources[0].secret }}"
#
#- name: "Install group-sync-operator bundle on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('kubernetes.core.kustomize', dir='kustomize/cluster-scope/bundles/group-sync-operator/') }}"
#    validate_certs: false
#- name: "Install github-group-sync secret on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'github-group-sync-secret.yaml') }}"
#    validate_certs: false
#  when: (query('kubernetes.core.k8s', kind='Secret', resource_name=('github-group-sync'), namespace='group-sync-operator')[0].data['privateKey'] | default('')) == ''
#- name: "Install groupsync on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'groupsync.yaml') }}"
#    validate_certs: false
#
#- name: "Install OAuth with GITHUB_OPENSHIFT_CLIENT on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'oauth.yaml') }}"
#    validate_certs: false
